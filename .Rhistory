### A. TIDE DATA
# pull tide station location
t <- data.frame(c(1,2), c(2,3))
View(t)
pt <- c(-122.76, 48.11) # port townsend
pt <- c("port townsend", -122.76, 48.11) # port townsend
brem <- c("bremerton", -122.62, 47.56)
seattle <- c("seattle", -122.34, 47.60)
tacoma <- c("tacoma", -122.41, 47.27)
tide_stations <- c(pt, seattle, brem, tacoma)
tide_stations <- data.frame(pt, seattle, brem, tacoma)
View(tide_stations)
?data,frame
?data.frame
tide_stations <- data.frame(pt, seattle)
View(tide_stations)
tide_stations <- rbind(pt, seattle)
tide_stations <- rbind(pt, seattle, bremerton, tacoma)
tide_stations <- rbind(pt, seattle, brem, tacoma)
row.names(tide_stations)
row.names(tide_stations) <- ""
row.names(tide_stations) <- NULL
colnames(tide_stations) <- c("station_name", "lon", "lat")
library(sf)
library(dplyr)
beaches <- read.csv("data/Recreational_Shellfish_Beaches.csv")
beachlist <- c(250510, 250260, 250184, 270200, 280820, 270286, 250400, 270460,
270440, 250900, 270801, 281050, 280710, 280680, 270300)
map_beaches <- beaches %>%
filter(BIDN %in% beachlist) %>%
st_as_sf(coords = c("Midx", "Midy"))
plot(map_beaches[0])
pt <- c("port townsend", 9444900, -122.76, 48.11, ) # port townsend
seattle <- c("seattle", 9447130, -122.34, 47.60)
brem <- c("bremerton", 9445958, -122.62, 47.56)
tacoma <- c("tacoma", 9446484, -122.41, 47.27)
tide_stations <- rbind(pt, seattle, brem, tacoma)
pt <- c("port townsend", 9444900, -122.76, 48.11) # port townsend
seattle <- c("seattle", 9447130, -122.34, 47.60)
brem <- c("bremerton", 9445958, -122.62, 47.56)
tacoma <- c("tacoma", 9446484, -122.41, 47.27)
tide_stations <- rbind(pt, seattle, brem, tacoma)
row.names(tide_stations) <- NULL
colnames(tide_stations) <- c("station_name", "station_id", "lon", "lat")
View(tide_stations)
# given list of beaches, find closest tide station
beaches_with_tide <- st_join(beaches, tide_stations, st_nearest_feature)
tide_stations <- st_as_sf(tide_stations, coords = c("lon", "lat"))
class(tide_stations)
tide_stations <- data.frame(rbind(pt, seattle, brem, tacoma))
row.names(tide_stations) <- NULL
colnames(tide_stations) <- c("station_name", "station_id", "lon", "lat")
tide_stations <- st_as_sf(tide_stations, coords = c("lon", "lat"))
View(tide_stations)
# given list of beaches, find closest tide station
beaches_with_tide <- st_join(beaches, tide_stations, st_nearest_feature)
tide_stations <- st_as_sf(tide_stations, coords = c("lon", "lat"))
# given list of beaches, find closest tide station
beaches_with_tide <- st_join(map_beaches, tide_stations, st_nearest_feature)
View(beaches_with_tide)
plot(tide_stations[0], add = TRUE, color = "red")
plot(tide_stations[0], add = TRUE, fill = "red")
?plot
plot(tide_stations[0], add = TRUE, col = "red")
tide_stations <- read.csv("data/tide_stations.csv")
View(tide_stations)
tide_stations$station_name <- trimws(tide_stations$station_name)
View(tide_stations)
?trimws
tide_stations$station_name <- trimws(tide_stations$station_name)
View(tide_stations)
str(tide_stations)
tide_stations$station_name <- trimws(tide_stations$station_name, which = "both")
View(tide_stations)
tide_stations$station_name
trimws(tide_stations$station_name, which = "both")
tide_stations$station_name <- trimws(as.character(tide_stations$station_name), which = "both")
tide_stations$station_name <- sub("^\\s+", "", tide_stations$station_name)
View(tide_stations)
tide_stations$station_name <- sub(" ", "", tide_stations$station_name)
View(tide_stations)
tide_stations$station_name <- sub("
", "", tide_stations$station_name)
View(tide_stations)
tide_stations$station_name <- gsub("(^\\s+)|(\\s+$)", "", tide_stations$station_name)
View(tide_stations)
library(stringr)
tide_stations$station_name <- str_trim(tide_stations$station_name)
tide_stations <- st_as_sf(tide_stations, coords = c("lon", "lat"))
# given list of beaches, find closest tide station
beaches_with_tide <- st_join(map_beaches, tide_stations, st_nearest_feature)
plot(tide_stations[0], add = TRUE, col = "red")
# given list of beaches, find closest tide station
beaches_with_tide <- map_beaches %>%
select(BEACHNAME, BIDN) %>%
st_join(tide_stations, st_nearest_feature)
unique(beaches_with_tide$station_name)
length(unique(beaches_with_tide$station_name))
write.csv("data/processed/beaches_with_tide.geojson")
write.csv(beaches_with_tide, "data/processed/beaches_with_tide.geojson")
library(geojsonio)
library(sf)
beach_data <- geojson_read(beach_url, what = "sp")
beach_url <- "https://services8.arcgis.com/rGGrs6HCnw87OFOT/arcgis/rest/services/Recreational_Shellfish_Beaches/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson"
beach_data <- geojson_read(beach_url, what = "sp")
beach_url <- download.file("https://services8.arcgis.com/rGGrs6HCnw87OFOT/arcgis/rest/services/Recreational_Shellfish_Beaches/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
library(httr)
beach_data <- GET(beach_url)
res
beach_data
beach_raw <- GET(beach_url)
library(jsonlite)
beach_data <- fromJSON(rawToChar(beach_raw$content))
View(beach_data)
beach_data[["features"]]
beach_data_df <-beach_data[["features"]]
View(beach_data_df)
names(beach_data)
beach_data_df <-beach_data$features
View(beach_data_df)
names(beach_data_df)
str(beach_data_df)
beach_df <-  beach_data_df$prope
beach_df <-  beach_data_df$properties
View(beach_df)
beach_data_df <-beach_data$features$properties # converting to data frame
names(beach_data_df)
# I only need columns BIDN (unique beach ID), BEACHNAME, FINALSTATUS
beach_data_df <- beach_data_df %>%
select(BEACHNAME, BIDN, FINALSTATUS)
View(beach_data_df)
View(beaches_with_tide)
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.geojson")
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.csv")
write.csv(beaches_with_tide, "data/processed/beaches_with_tide.csv", row.names=FALSE)
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.csv")
write.csv(beaches_with_tide, "data/processed/beaches_with_tide.csv")
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.csv")
View(my_beaches)
write.csv(beaches_with_tide, "data/processed/beaches_with_tide.csv", row.names=FALSE)
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.csv")
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.csv")
write.csv(st_drop_geometry(beaches_with_tide), "data/processed/beaches_with_tide.csv", row.names=FALSE)
## READING IN DATA FRAME CONTAINING MY BEACHES AND THEIR CORRESPONDING TIDE STATIONS
## I'll be using this list to filter WDFW beaches, and pull NOAA tide data
my_beaches <- read.csv("data/processed/beaches_with_tide.csv")
# filtering to the beaches I want
beach_filtered <- bebach_data_df %>%
filter(BIDN %in% my_beaches$BIDN)
# filtering to the beaches I want
beach_filtered <- beach_data_df %>%
filter(BIDN %in% my_beaches$BIDN)
View(beach_data_df)
View(beach_filtered)
## READING IN TIDE DATA
# generating list of unique tide station IDs from my_beaches list
tide_stations <- unique(my_beaches$station_id)
tides_raw <- GET(paste0(noaa_api_url, noaa_params, "&station=8445017"))
noaa_api_url <- "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?" # NOAA's API request URL
noaa_params <- "date=today&product=predictions&datum=MLLW&time_zone=lst_ldt?interval=hilo&units=english&application=BivariateBivalve&format=csv"
tides_raw <- GET(paste0(noaa_api_url, noaa_params, "&station=8445017"))
View(tides_raw)
tides_raw
tides_raw <- GET(paste0(noaa_api_url, noaa_params, "&station=9445017"))
tides_raw
noaa_params <- "date=today&product=predictions&datum=MLLW&time_zone=lst?interval=hilo&units=english&application=BivariateBivalve&format=csv"
tides_raw <- GET(paste0(noaa_api_url, noaa_params, "&station=9445017"))
tides_raw
noaa_params <- "date=today&product=predictions&datum=MLLW&time_zone=lst_ldt&interval=hilo&units=english&application=BivariateBivalve&format=csv"
tides_raw <- GET(paste0(noaa_api_url, noaa_params, "&station=9445017"))
tides_raw
View(tides_raw)
View(tides_raw)
noaa_params <- "date=today&product=predictions&datum=MLLW&time_zone=lst_ldt&interval=hilo&units=english&application=BivariateBivalve&format=json"
tides_raw <- GET(paste0(noaa_api_url, noaa_params, "&station=9445017"))
tides_data <- fromJSON(rawToChar(tides_raw$content))
View(tides_data)
tides_df <- tides_data$predicitons
tides_df <- tides_data$predictions
View(tides_df)
# End goal: data frame of tide stations, with boolean indicating whether or not a daytime low tide for clamming and geoducking will exist
tide_boolean <- data.frame(matrix(nrow=0, ncol=3))
names(tide_boolean) <- c("station_id", "clam_check", "geoduck_check")
library(lubridate)
str(tides_df)
ymd_hm(tides_df$t)
tz()
ymd_hm(tides_df$t, tz = "PST8PDT")
hm(tides_df$t, tz = "PST8PDT")
tides_df <- tides_data$predictions
hm(tides_df$t, tz = "PST8PDT")
hour(tides_df$t)
tides_df <- tides_data$predictions %>%
filter(type == "L")# parsing to data frame
tides_df$hour <- hour(tides_df$t) # converting date/time column to a hour column
tides$daytimelow <- tides_df$v >= 8 & tides_df$v <= 18 # check to see if there is a daytime low
tides_df$daytimelow <- tides_df$v >= 8 & tides_df$v <= 18 # check to see if there is a daytime low
tides_df$daytimelow <- tides_df$v >= 8 | tides_df$v <= 18 # check to see if there is a daytime low
tides_df$daytimelow <- tides_df$v >= 8 && tides_df$v <= 18 # check to see if there is a daytime low
tides_df$daytimelow <- tides_df$v >= 8 & tides_df$v <= 18 # check to see if there is a daytime low
tides_df$daytimelow <- tides_df$hour >= 8 & tides_df$hour <= 18 # check to see if there is a daytime low
tides_df$clamtide <- ifelse(tides_df$v <= -0.5 & tides$daytimelow, TRUE, FALSE)
tides_df$geotide <- ifelse(tides_df$v <= -2 & tides$daytimelow, TRUE, FALSE)
tides_df$clamtide <- ifelse(tides_df$v <= -0.5 & tides_df$daytimelow, TRUE, FALSE)
tides_df$geotide <- ifelse(tides_df$v <= -2 & tides_df$daytimelow, TRUE, FALSE)
tides_df$v <- c("-0.5", "-2")
tides_df$daytimelow <- tides_df$hour >= 8 & tides_df$hour <= 18 # check to see if there is a daytime low
tides_df$clamtide <- ifelse(tides_df$v <= -0.5 & tides_df$daytimelow, TRUE, FALSE)
tides_df$geotide <- ifelse(tides_df$v <= -2 & tides_df$daytimelow, TRUE, FALSE)
tides_df$clamtide <- ifelse(tides_df$v <= -0.5 & tides_df$daytimelow, TRUE, FALSE)
tides_df$clamtide <- ifelse(tides_df$v < -0.5 & tides_df$daytimelow, TRUE, FALSE)
tides_df$v <= -0.5 & tides_df$daytimelow
tides_df$clamtide <- ifelse(tides_df$v <= -0.5, TRUE, FALSE)
-2 <= -0.5
